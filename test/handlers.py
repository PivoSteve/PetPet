from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from modules.libraries.database import get_pet, create_pet, update_pet
from modules.libraries.constant import const
from datetime import datetime, timedelta
import asyncio
import random, math

router = Router()

## MARK: Utils
class PetStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_game_choice = State()
    waiting_for_riddle_answer = State()
    waiting_for_math_answer = State()
    waiting_for_word_guess = State()

def parse_datetime(date_string):
    if not date_string:
        return datetime.min
    try:
        return datetime.fromisoformat(date_string)
    except (TypeError, ValueError):
        return datetime.min

def get_main_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üîç –°—Ç–∞—Ç—É—Å"), KeyboardButton(text="üçΩ –ü–æ–∫–æ—Ä–º–∏—Ç—å")],
            [KeyboardButton(text="üöø –ü–æ–º—ã—Ç—å"), KeyboardButton(text="üéÆ –ü–æ–∏–≥—Ä–∞—Ç—å")],
            [KeyboardButton(text="üò¥ –£–ª–æ–∂–∏—Ç—å —Å–ø–∞—Ç—å"), KeyboardButton(text="üìö –£—á–∏—Ç—å —Ç—Ä—é–∫")]
            ],
            resize_keyboard=True
        )

def check_evolution(pet: dict) -> str:
    if all(pet[stat] >= 80 for stat in const.STATS):
        new_form = random.choice(["–°—É–ø–µ—Ä", "–ú–µ–≥–∞", "–£–ª—å—Ç—Ä–∞", "–ì–∏–ø–µ—Ä"]) + pet['name']
        update_pet(pet['user_id'], name=new_form)
        return f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢–≤–æ–π –ø–∏—Ç–æ–º–µ—Ü —ç–≤–æ–ª—é—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–ª –≤ {new_form}!"
    return ""

def apply_personality_effect(pet, stat, value):
    personality = pet['personality']
    if personality == '–ò–≥—Ä–∏–≤—ã–π':
        if stat in ['happiness', 'energy']:
            value *= 1.2
        elif stat == 'intelligence':
            value *= 0.9
    elif personality == '–õ–µ–Ω–∏–≤—ã–π':
        if stat == 'energy':
            value *= 0.8
        elif stat in ['cleanliness', 'intelligence']:
            value *= 1.1
    elif personality == '–õ—é–±–æ–ø—ã—Ç–Ω—ã–π':
        if stat == 'intelligence':
            value *= 1.2
        elif stat == 'cleanliness':
            value *= 0.9
    elif personality == '–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π':
        if stat == 'happiness':
            value *= 1.2
        elif stat == 'intelligence':
            value *= 0.9
    elif personality == '–ó–∞—Å—Ç–µ–Ω—á–∏–≤—ã–π':
        if stat == 'happiness':
            value *= 0.9
        elif stat == 'intelligence':
            value *= 1.1
    return round(value)
## MARK END: Utils

## MARK: Command handlers
@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    pet = get_pet(message.from_user.id)
    if pet:
        await message.answer(f"‚úî –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –¢–≤–æ–π –ø–∏—Ç–æ–º–µ—Ü {pet['name']} –∂–¥–µ—Ç —Ç–µ–±—è!", reply_markup=get_main_keyboard())
    else:
        await message.answer("‚úî –ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º —Ç–≤–æ–µ–≥–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞. –ö–∞–∫ —Ç—ã —Ö–æ—á–µ—à—å –µ–≥–æ –Ω–∞–∑–≤–∞—Ç—å?")
        await state.set_state(PetStates.waiting_for_name)

@router.message(PetStates.waiting_for_name)
async def create_new_pet(message: Message, state: FSMContext):
    create_pet(message.from_user.id, message.text)
    pet = get_pet(message.from_user.id)
    await cmd_status(message, f"‚úî –û—Ç–ª–∏—á–Ω–æ! –¢–≤–æ–π –Ω–æ–≤—ã–π –ø–∏—Ç–æ–º–µ—Ü {pet['name']} —Å–æ–∑–¥–∞–Ω.\n–£—Ö–∞–∂–∏–≤–∞–π –∑–∞ –Ω–∏–º —Ö–æ—Ä–æ—à–æ! –í–æ—Ç –µ–≥–æ –Ω–∞—á–∞–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:")
    await state.clear()

@router.message(F.text == "üîç –°—Ç–∞—Ç—É—Å")
async def cmd_status(message: Message, custom_message: str = None):
    pet = get_pet(message.from_user.id)
    if pet:
        if custom_message is not None: 
            status_text = f"{custom_message}\n\n"
        else:
            status_text = f"–°—Ç–∞—Ç—É—Å {pet['name']}:\n\n"
        status_emoji = {
            'hunger': 'üçî –ì–æ–ª–æ–¥',
            'cleanliness': 'üöø –ß–∏—Å—Ç–æ—Ç–∞',
            'happiness': 'üòä –°—á–∞—Å—Ç—å–µ',
            'energy': '‚ö° –≠–Ω–µ—Ä–≥–∏—è',
            'intelligence': 'üß† –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç',
        }
        for stat, emoji in status_emoji.items():
            value = pet[stat]
            bars = '‚ñà' * (value // 10) + '‚ñí' * ((100 - value) // 10)
            status_text += f"{emoji}: {bars} {value}/100\n"
        
        status_text += f"\nüôÉ –•–∞—Ä–∞–∫—Ç–µ—Ä: {pet['personality']}\n"
        status_text += f"ü•ò –õ—é–±–∏–º–∞—è –µ–¥–∞: {pet['favorite_food']}\n"
        status_text += f"üèÖ –õ—é–±–∏–º–æ–µ –∑–∞–Ω—è—Ç–∏–µ: {pet['favorite_activity']}\n"
        
        evolution_message = check_evolution(pet)
        if evolution_message:
            status_text += f"\n{evolution_message}"
        
        await message.answer(status_text)
    else:
        await message.answer("‚ùå –£ —Ç–µ–±—è –µ—â–µ –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–∞. –ò—Å–ø–æ–ª—å–∑—É–π /start —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ.")

@router.message(F.text == "üçΩ –ü–æ–∫–æ—Ä–º–∏—Ç—å")
async def cmd_feed(message: Message):
    pet = get_pet(message.from_user.id)
    if pet:
        last_fed = parse_datetime(pet.get('last_fed'))
        if datetime.now() - last_fed > timedelta(minutes=15):
            foods = ["üçé –Ø–±–ª–æ–∫–æ", "ü•ï –ú–æ—Ä–∫–æ–≤—å", "üçå –ë–∞–Ω–∞–Ω", "ü•ú –û—Ä–µ—Ö–∏", "üçì –Ø–≥–æ–¥—ã"]
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=food, callback_data=f"feed_{food.split()[1]}") for food in foods[:3]],
                [InlineKeyboardButton(text=food, callback_data=f"feed_{food.split()[1]}") for food in foods[3:]]
            ])
            await message.answer("‚úî –ß–µ–º —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–∫–æ—Ä–º–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞?", reply_markup=keyboard)
        else:
            await message.answer(f"‚ùå {pet['name']} –Ω–µ –≥–æ–ª–æ–¥–µ–Ω. –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∫–æ—Ä–º–ª–µ–Ω–∏–µ–º.")
    else:
        await message.answer("‚ùå –£ —Ç–µ–±—è –µ—â–µ –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–∞. –ò—Å–ø–æ–ª—å–∑—É–π /start —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ.")

@router.callback_query(F.data.startswith("feed_"))
async def process_feed(callback_query: CallbackQuery):
    food = callback_query.data.split("_")[1]
    pet = get_pet(callback_query.from_user.id)
    
    hunger_reduction = apply_personality_effect(pet, 'hunger', random.randint(20, 40))
    energy_boost = apply_personality_effect(pet, 'energy', random.randint(10, 30))
    happiness_boost = apply_personality_effect(pet, 'happiness', random.randint(5, 15))
    
    if food == pet['favorite_food']:
        hunger_reduction = int(hunger_reduction * 1.5)
        happiness_boost = int(happiness_boost * 2)
    
    new_hunger = max(const.MIN_STAT, pet['hunger'] - hunger_reduction)
    new_energy = min(const.MAX_STAT, pet['energy'] + energy_boost)
    new_happiness = min(const.MAX_STAT, pet['happiness'] + happiness_boost)
    
    update_pet(callback_query.from_user.id, 
               hunger=new_hunger, 
               energy=new_energy, 
               happiness=new_happiness, 
               last_fed=datetime.now().isoformat())
    
    response = f"üçî –¢—ã –ø–æ–∫–æ—Ä–º–∏–ª {pet['name']} {food}.\n"
    if food == pet['favorite_food']:
        response += f"‚ú® –≠—Ç–æ –µ–≥–æ –ª—é–±–∏–º–∞—è –µ–¥–∞! –û–Ω –≤ –≤–æ—Å—Ç–æ—Ä–≥–µ!\n"
    response += f"‚ùï –£—Ä–æ–≤–µ–Ω—å –≥–æ–ª–æ–¥–∞ —Ç–µ–ø–µ—Ä—å {new_hunger}/100, —ç–Ω–µ—Ä–≥–∏–∏ {new_energy}/100, –∞ —Å—á–∞—Å—Ç—å—è {new_happiness}/100."
    
    if pet['personality'] == '–õ–µ–Ω–∏–≤—ã–π':
        response += f"\nüò¥ {pet['name']} –ª–µ–Ω–∏—Ç—Å—è –∏ –Ω–µ —Ç—Ä–∞—Ç–∏—Ç –º–Ω–æ–≥–æ —ç–Ω–µ—Ä–≥–∏–∏ –Ω–∞ –µ–¥—É."
    elif pet['personality'] == '–ò–≥—Ä–∏–≤—ã–π':
        response += f"\nüéâ {pet['name']} –∏–≥—Ä–∏–≤–æ –Ω–∞–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –µ–¥—É!"
    
    await callback_query.message.edit_text(response)

@router.message(F.text == "üöø –ü–æ–º—ã—Ç—å")
async def cmd_clean(message: Message):
    pet = get_pet(message.from_user.id)
    if pet:
        last_cleaned = parse_datetime(pet.get('last_cleaned'))
        if datetime.now() - last_cleaned > timedelta(minutes=25):
            cleaning_options = ["üßº –ú—ã–ª–æ", "üß¥ –®–∞–º–ø—É–Ω—å", "üßΩ –ì—É–±–∫–∞"]
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=option, callback_data=f"clean_{option.split()[1]}") for option in cleaning_options]
            ])
            await message.answer(f"–í—ã–±–µ—Ä–∏, —á–µ–º —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–º—ã—Ç—å {pet['name']}:", reply_markup=keyboard)
        else:
            await message.answer(f"‚ùå {pet['name']} —É–∂–µ —á–∏—Å—Ç—ã–π. –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∫—É–ø–∞–Ω–∏–µ–º.")
    else:
        await message.answer("‚ùå –£ —Ç–µ–±—è –µ—â–µ –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–∞. –ò—Å–ø–æ–ª—å–∑—É–π /start —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ.")

@router.callback_query(F.data.startswith("clean_"))
async def process_cleaning(callback_query: CallbackQuery):
    cleaning_item = callback_query.data.split("_")[1]
    pet = get_pet(callback_query.from_user.id)
    
    cleanliness_boost = apply_personality_effect(pet, 'cleanliness', random.randint(30, 50))
    happiness_change = apply_personality_effect(pet, 'happiness', random.randint(-10, 20))
    
    if cleaning_item == "–ú—ã–ª–æ":
        cleanliness_boost += 10
    elif cleaning_item == "–®–∞–º–ø—É–Ω—å":
        happiness_change += 10
    elif cleaning_item == "–ì—É–±–∫–∞":
        cleanliness_boost += 5
        happiness_change += 5
    
    new_cleanliness = min(const.MAX_STAT, pet['cleanliness'] + cleanliness_boost)
    new_happiness = max(const.MIN_STAT, min(const.MAX_STAT, pet['happiness'] + happiness_change))
    
    update_pet(callback_query.from_user.id, 
               cleanliness=new_cleanliness, 
               happiness=new_happiness, 
               last_cleaned=datetime.now().isoformat())
    
    response = f"‚ú® –¢—ã –ø–æ–º—ã–ª {pet['name']} —Å –ø–æ–º–æ—â—å—é {cleaning_item}.\n"
    response += f"–£—Ä–æ–≤–µ–Ω—å —á–∏—Å—Ç–æ—Ç—ã —Ç–µ–ø–µ—Ä—å {new_cleanliness}/100, –∞ —Å—á–∞—Å—Ç—å—è {new_happiness}/100.\n"
    
    if pet['personality'] == '–õ–µ–Ω–∏–≤—ã–π':
        response += f"\nüò¥ {pet['name']} –ª–µ–Ω–∏–≤–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–µ–±—è –º—ã—Ç—å."
    elif pet['personality'] == '–ò–≥—Ä–∏–≤—ã–π':
        response += f"\nüéâ {pet['name']} –∏–≥—Ä–∏–≤–æ –ø–ª–µ—Å–∫–∞–µ—Ç—Å—è –≤ –≤–æ–¥–µ!"
    
    await callback_query.message.edit_text(response)

@router.message(F.text == "üò¥ –£–ª–æ–∂–∏—Ç—å —Å–ø–∞—Ç—å")
async def pet_sleep(message: Message):
    pet = get_pet(message.from_user.id)
    if pet:
        last_slept = parse_datetime(pet.get('last_slept'))
        if datetime.now() - last_slept > timedelta(minutes=25) or pet.get('energy') < 40:
            sleep_duration = random.randint(2, 7)
            new_energy = min(100, pet['energy'] + sleep_duration * 10)
            new_hunger = min(100, pet['hunger'] + sleep_duration * 5)
            new_happiness = max(0, pet['happiness'] - sleep_duration * 2)
            new_cleanliness = max(0, pet['cleanliness'] - sleep_duration * 3)
            time_asleep = datetime.now() - timedelta(hours=sleep_duration)
            time_asleep_str = time_asleep.isoformat()
            
            update_pet(message.from_user.id, 
                       energy=new_energy, 
                       hunger=new_hunger, 
                       happiness=new_happiness, 
                       cleanliness=new_cleanliness, 
                       last_slept=datetime.now().isoformat(),
                       last_fed=time_asleep_str,
                       last_cleaned=time_asleep_str,
                       last_played=time_asleep_str)
            
            await message.answer(f"üò¥ {pet['name']} —Å–ø–∏—Ç, –¥–æ–∂–¥–∏—Å—å –µ–≥–æ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É—Ö–∞–∂–∏–≤–∞—Ç—å –∑–∞ –Ω–∏–º!")
            await asyncio.sleep(sleep_duration)
            await cmd_status(message, f"‚úî {pet['name']} –ø–æ—Å–ø–∞–ª {sleep_duration} —á–∞—Å–æ–≤ –∏ —Ö–æ—Ä–æ—à–æ –æ—Ç–¥–æ—Ö–Ω—É–ª!\n–í–æ—Ç –µ–≥–æ –Ω—ã–Ω–µ—à–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:")
        else:
            await message.answer(f"‚ùå {pet['name']} –µ—â–µ –Ω–µ —É—Å—Ç–∞–ª. –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Å–Ω–æ–º.")
    else:
        await message.answer("‚ùå –£ —Ç–µ–±—è –µ—â–µ –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–∞. –ò—Å–ø–æ–ª—å–∑—É–π /start —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ.")


@router.message(F.text == "üìö –£—á–∏—Ç—å —Ç—Ä—é–∫")
async def cmd_learn_trick(message: Message):
    pet = get_pet(message.from_user.id)
    if pet:
        result = learn_new_trick(pet)
        await message.answer(result)
    else:
        await message.answer("‚ùå –£ —Ç–µ–±—è –µ—â–µ –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–∞. –ò—Å–ø–æ–ª—å–∑—É–π /start —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ.")

def learn_new_trick(pet):
    tricks = {
        "sit": "—Å–∏–¥–µ—Ç—å",
        "roll over": "–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—å—Å—è", 
        "fetch": "–ø—Ä–∏–Ω–µ—Å—Ç–∏",
        "speak": "–≥–æ–ª–æ—Å",
        "play dead": "–ø—Ä–∏—Ç–≤–æ—Ä–∏—Ç—å—Å—è –º—ë—Ä—Ç–≤—ã–º"
    }
    
    if pet['tricks'] is None:
        pet['tricks'] = []
    
    available_tricks = [t for t in tricks if tricks[t] not in pet['tricks']] 
    if not available_tricks:
        return f"üéì {pet['name']} —É–∂–µ –∑–Ω–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã!"
    
    new_trick_key = random.choice(available_tricks)
    new_trick = tricks[new_trick_key]
    
    success_chance = (1 - math.sqrt(random.random()))
    intelligence_factor = pet['intelligence'] / 100
    
    if success_chance < intelligence_factor:
        pet['tricks'].append(new_trick) # FIXME: 
        
        intelligence_boost = apply_personality_effect(pet, 'intelligence', random.randint(5, 15))
        happiness_boost = apply_personality_effect(pet, 'happiness', random.randint(10, 20))
        
        new_intelligence = min(const.MAX_STAT, pet['intelligence'] + intelligence_boost)
        new_happiness = min(const.MAX_STAT, pet['happiness'] + happiness_boost)
        
        update_pet(pet['user_id'],
                   tricks=pet['tricks'],
                   intelligence=new_intelligence,
                   happiness=new_happiness)
        
        return f'üéâ {pet["name"]} —É—Å–ø–µ—à–Ω–æ –≤—ã—É—á–∏–ª –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É: {new_trick}! –£—Ä–æ–≤–µ–Ω—å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ —Ç–µ–ø–µ—Ä—å {new_intelligence}/100, –∞ —Å—á–∞—Å—Ç—å—è {new_happiness}/100.'
    else:
        energy_reduction = apply_personality_effect(pet, 'energy', random.randint(5, 10))
        new_energy = max(const.MIN_STAT, pet['energy'] - energy_reduction)
        
        update_pet(pet['user_id'], energy=new_energy)
        
        return f'üòì {pet["name"]} —Å—Ç–∞—Ä–∞–ª—Å—è, –Ω–æ –ø–æ–∫–∞ –Ω–µ —Å–º–æ–≥ –≤—ã—É—á–∏—Ç—å –∫–æ–º–∞–Ω–¥—É {new_trick}, –≤–µ–¥—å –µ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç {intelligence_factor:.2f} –Ω–∏–∂–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ {success_chance:.2f}. –£—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏ —Ç–µ–ø–µ—Ä—å {new_energy}/100. –ü–æ–ø—Ä–æ–±—É–π –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!'

@router.message(F.text == "üéÆ –ü–æ–∏–≥—Ä–∞—Ç—å")
async def cmd_play(message: Message, state: FSMContext):
    pet = get_pet(message.from_user.id)
    if pet and can_play(pet):
        games = ["üß© –ó–∞–≥–∞–¥–∫–∏", "üî¢ –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "üî§ –£–≥–∞–¥–∞–π —Å–ª–æ–≤–æ"]
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=game, callback_data=f"play_{game.split()[1]}") for game in games[:3]],
            [InlineKeyboardButton(text=game, callback_data=f"play_{game.split()[1]}") for game in games[3:]]
        ])
        await message.answer("‚ùî –í–æ —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–∏–≥—Ä–∞—Ç—å —Å –ø–∏—Ç–æ–º—Ü–µ–º?", reply_markup=keyboard)
        await state.set_state(PetStates.waiting_for_game_choice)
    else:
        await message.answer(f"‚ùå {pet['name']} —É—Å—Ç–∞–ª. –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä–æ–π.")

@router.callback_query(PetStates.waiting_for_game_choice)
async def process_game_choice(callback_query: CallbackQuery, state: FSMContext):
    game = callback_query.data.split("_")[1]
    pet = get_pet(callback_query.from_user.id)
    
    if game == "–ó–∞–≥–∞–¥–∫–∏":
        await start_riddle_game(callback_query, state)
    elif game == "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞":
        await start_math_game(callback_query, state)
    elif game == "–£–≥–∞–¥–∞–π":
        await start_word_guess_game(callback_query, state)
        
async def start_riddle_game(callback_query: CallbackQuery, state: FSMContext):
    riddles = [
        ("‚ùî –£ –Ω–µ–≥–æ –æ–≥—Ä–æ–º–Ω—ã–π —Ä–æ—Ç, –û–Ω –∑–æ–≤–µ—Ç—Å—è ‚Ä¶", "–±–µ–≥–µ–º–æ—Ç"),
        ("‚ùî –ù–µ –ø—Ç–∏—Ü–∞, –∞ —Å –∫—Ä—ã–ª—å—è–º–∏, –ù–µ –ø—á–µ–ª–∞, –∞ –Ω–∞–¥ —Ü–≤–µ—Ç–∫–æ–º", "–±–∞–±–æ—á–∫–∞"),
        ("‚ùî –ß—Ç–æ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º, –Ω–æ –¥—Ä—É–≥–∏–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç —ç—Ç–æ —á–∞—â–µ?", "–º–æ—ë –∏–º—è"),
        ("‚ùî –ß—Ç–æ –º–æ–∂–Ω–æ –≤–∏–¥–µ—Ç—å —Å –∑–∞–∫—Ä—ã—Ç—ã–º–∏ –≥–ª–∞–∑–∞–º–∏?", "—Å–æ–Ω"),
        ("‚ùî –ö–∞–∫ —á–µ–ª–æ–≤–µ–∫ –º–æ–∂–µ—Ç –ø—Ä–æ–≤–µ—Å—Ç–∏ 8 –¥–Ω–µ–π –±–µ–∑ —Å–Ω–∞?", "—Å–ø–∞—Ç—å –Ω–æ—á—å—é"),
        ("‚ùî –ù–µ –∂–∏–≤–æ–µ, –∞ –Ω–∞ –≤—Å–µ—Ö —è–∑—ã–∫–∞—Ö –≥–æ–≤–æ—Ä–∏—Ç.", "—ç—Ö–æ"),
        ("‚ùî –ß—Ç–æ –Ω–µ –≤–º–µ—Å—Ç–∏—Ç—Å—è –¥–∞–∂–µ –≤ —Å–∞–º—É—é –±–æ–ª—å—à—É—é –∫–∞—Å—Ç—Ä—é–ª—é?", "–µ—ë –∫—Ä—ã—à–∫–∞"),
        ("‚ùî –ß–µ–º –∫–æ–Ω—á–∞–µ—Ç—Å—è –ª–µ—Ç–æ –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ—Å–µ–Ω—å?", "–±—É–∫–≤–∞ –æ"),
        ("‚ùî –í –≥–æ–¥—É 12 –º–µ—Å—è—Ü–µ–≤. –°–µ–º—å –∏–∑ –Ω–∏—Ö –∏–º–µ—é—Ç 31 –¥–µ–Ω—å. –°–∫–æ–ª—å–∫–æ –º–µ—Å—è—Ü–µ–≤ –≤ –≥–æ–¥—É –∏–º–µ—é—Ç 28 –¥–Ω–µ–π?", "–≤—Å–µ"),
        ("‚ùî –ö—Ç–æ —Ö–æ–¥–∏—Ç —Å–∏–¥—è?", "—à–∞—Ö–º–∞—Ç–∏—Å—Ç"),
        ("‚ùî –•–≤–æ—Å—Ç –ø—É—à–∏—Å—Ç—ã–π, –º–µ—Ö –∑–æ–ª–æ—Ç–∏—Å—Ç—ã–π, –í –ª–µ—Å—É –∂–∏–≤–µ—Ç, –í –¥–µ—Ä–µ–≤–Ω–µ –∫—É—Ä –∫—Ä–∞–¥–µ—Ç", "–ª–∏—Å–∞")    
    ]
    riddle, answer = random.choice(riddles)
    await state.update_data(correct_answer=answer)
    await callback_query.message.edit_text(f"‚ùï –û—Ç–≥–∞–¥–∞–π –∑–∞–≥–∞–¥–∫—É:\n\n{riddle}")
    await state.set_state(PetStates.waiting_for_riddle_answer)

async def start_math_game(callback_query: CallbackQuery, state: FSMContext):
    num1, num2 = random.randint(1, 10), random.randint(1, 10)
    operation = random.choice(['+', '-', '*'])
    question = f"{num1} {operation} {num2}"
    answer = eval(question)
    await state.update_data(correct_answer=answer)
    await callback_query.message.edit_text(f"‚ùï –†–µ—à–∏ –ø—Ä–∏–º–µ—Ä:\n\n{question} = ?")
    await state.set_state(PetStates.waiting_for_math_answer)

async def start_word_guess_game(callback_query: CallbackQuery, state: FSMContext):
    words = ["–∫–æ—Ç", "—Å–æ–±–∞–∫–∞", "–ø–æ–ø—É–≥–∞–π", "—Ö–æ–º—è–∫", "—á–µ—Ä–µ–ø–∞—Ö–∞", "–∫–æ–Ω—å", "–ª–∏—Å–∞", "–ª–µ—Ç–æ"]
    word = random.choice(words)
    await state.update_data(correct_answer=word, attempts=5)
    masked_word = "".join(["üï≥" if i != 0 else w for i, w in enumerate(word)])
    await callback_query.message.edit_text(f"‚ùï –£–≥–∞–¥–∞–π —Å–ª–æ–≤–æ:\n\n{masked_word}\n\n–£ —Ç–µ–±—è 5 –ø–æ–ø—ã—Ç–æ–∫.")
    await state.set_state(PetStates.waiting_for_word_guess)

@router.message(PetStates.waiting_for_riddle_answer)
async def process_riddle_answer(message: Message, state: FSMContext):
    data = await state.get_data()
    correct_answer = data.get("correct_answer")
    user_answer = str(message.text.lower())
    pet = get_pet(message.from_user.id)
    
    if user_answer == correct_answer:
        await process_correct_answer(message, state, "–ó–∞–≥–∞–¥–∫–∏")
    else:
        await process_wrong_answer(message, state, f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}")

    await state.clear()

@router.message(PetStates.waiting_for_math_answer)
async def process_math_answer(message: Message, state: FSMContext):
    data = await state.get_data()
    correct_answer = data.get("correct_answer")
    
    try:
        user_answer = int(message.text)
        if user_answer == correct_answer:
            await process_correct_answer(message, state, "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞")
        else:
            await process_wrong_answer(message, state, f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}")
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

@router.message(PetStates.waiting_for_word_guess)
async def process_word_guess(message: Message, state: FSMContext):
    data = await state.get_data()
    correct_answer = data.get("correct_answer")
    attempts = data.get("attempts", 3)
    
    if message.text.lower() == correct_answer:
        await process_correct_answer(message, state, "–£–≥–∞–¥–∞–π–∫–∏")
    else:
        attempts -= 1
        if attempts > 0:
            masked_word = "".join([w if w in message.text.lower() else "_" for w in correct_answer])
            await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {attempts}\n\n{masked_word}")
            await state.update_data(attempts=attempts)
        else:
            await process_wrong_answer(message, state, f"–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ: {correct_answer}")

## MARK: Some more utils
def can_play(pet):
    last_played = parse_datetime(pet.get('last_played'))
    return datetime.now() - last_played > timedelta(minutes=10)

async def process_correct_answer(message: Message, state: FSMContext, game_type):
    pet = get_pet(message.from_user.id)
    happiness_boost = apply_personality_effect(pet, 'happiness', random.randint(20, 40))
    intelligence_boost = apply_personality_effect(pet, 'intelligence', random.randint(15, 30))
    energy_reduction = apply_personality_effect(pet, 'energy', random.randint(10, 20))
    
    if game_type == pet['favorite_activity']:
        happiness_boost = int(happiness_boost * 1.5)
        intelligence_boost = int(intelligence_boost * 1.5)
    
    new_happiness = min(const.MAX_STAT, pet['happiness'] + happiness_boost)
    new_intelligence = min(const.MAX_STAT, pet['intelligence'] + intelligence_boost)
    new_energy = max(const.MIN_STAT, pet['energy'] - energy_reduction)
    
    update_pet(message.from_user.id, 
               happiness=new_happiness, 
               intelligence=new_intelligence, 
               energy=new_energy,
               last_played=datetime.now().isoformat())
    
    response = f"‚ú® –û—Ç–ª–∏—á–Ω–æ! {pet['name']} –≤ –≤–æ—Å—Ç–æ—Ä–≥–µ –æ—Ç –≤–∞—à–µ–π —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π –∏–≥—Ä—ã –≤ {game_type}. "
    if game_type == pet['favorite_activity']:
        response += "–≠—Ç–æ –µ–≥–æ –ª—é–±–∏–º–æ–µ –∑–∞–Ω—è—Ç–∏–µ!"
    response += f"\n–£—Ä–æ–≤–µ–Ω—å —Å—á–∞—Å—Ç—å—è —Ç–µ–ø–µ—Ä—å {new_happiness}/100, –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ {new_intelligence}/100, –∞ —ç–Ω–µ—Ä–≥–∏–∏ {new_energy}/100."
    
    if pet['personality'] == '–õ—é–±–æ–ø—ã—Ç–Ω—ã–π':
        response += f"\n\nüßê {pet['name']} —Å –ª—é–±–æ–ø—ã—Ç—Å—Ç–≤–æ–º –∏–∑—É—á–∞–µ—Ç –Ω–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è!"
    elif pet['personality'] == '–ó–∞—Å—Ç–µ–Ω—á–∏–≤—ã–π':
        response += f"\n\nüòä {pet['name']} –∑–∞—Å—Ç–µ–Ω—á–∏–≤–æ —Ä–∞–¥—É–µ—Ç—Å—è —É—Å–ø–µ—Ö—É."
    
    await message.answer(response)
    await state.clear()

async def process_wrong_answer(message: Message, state: FSMContext, correct_answer):
    pet = get_pet(message.from_user.id)
    new_happiness = min(100, pet['happiness'] + 10)
    new_intelligence = min(100, pet['intelligence'] - random.randint(2, 15))
    update_pet(message.from_user.id, happiness=new_happiness, intelligence=new_intelligence, last_played=datetime.now().isoformat())
    await message.answer(f"‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç. {correct_answer}.\n{pet['name']} –≤—Å–µ —Ä–∞–≤–Ω–æ –¥–æ–≤–æ–ª–µ–Ω, —á—Ç–æ –≤—ã –∏–≥—Ä–∞–ª–∏ –≤–º–µ—Å—Ç–µ. –£—Ä–æ–≤–µ–Ω—å —Å—á–∞—Å—Ç—å—è —Ç–µ–ø–µ—Ä—å {new_happiness}/100, –∞ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ {new_intelligence}/100.")
    await state.clear()

## MARK END: Some more utils