from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from modules.libraries.database import get_pet, create_pet, update_pet
from datetime import datetime, timedelta
import random

router = Router()

class PetStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_game_choice = State()
    waiting_for_riddle_answer = State()
    waiting_for_training_choice = State()
    waiting_for_training_intensity = State()

TRAINING_TYPES = {
    "–ë–µ–≥": {"emoji": "üèÉ‚Äç‚ôÇÔ∏è", "primary": "stamina", "secondary": "agility"},
    "–ü–ª–∞–≤–∞–Ω–∏–µ": {"emoji": "üèä‚Äç‚ôÇÔ∏è", "primary": "stamina", "secondary": "strength"},
    "–ü—Ä—ã–∂–∫–∏": {"emoji": "ü¶ò", "primary": "agility", "secondary": "stamina"},
    "–°–∏–ª–æ–≤—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è": {"emoji": "üèãÔ∏è‚Äç‚ôÇÔ∏è", "primary": "strength", "secondary": "stamina"},
    "–†–∞—Å—Ç—è–∂–∫–∞": {"emoji": "üßò‚Äç‚ôÇÔ∏è", "primary": "flexibility", "secondary": "agility"},
    "–ò–≥—Ä—ã –Ω–∞ —Å–æ–æ–±—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å": {"emoji": "üß†", "primary": "intelligence", "secondary": "happiness"}
}

INTENSITY_LEVELS = {
    "–õ–µ–≥–∫–∞—è": {"multiplier": 0.5, "energy_cost": 10},
    "–°—Ä–µ–¥–Ω—è—è": {"multiplier": 1.0, "energy_cost": 20},
    "–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–∞—è": {"multiplier": 1.5, "energy_cost": 30}
}

def parse_datetime(date_string):
    if not date_string:
        return datetime.min
    try:
        return datetime.fromisoformat(date_string)
    except (TypeError, ValueError):
        return datetime.min

def get_main_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üîç –°—Ç–∞—Ç—É—Å"), KeyboardButton(text="üçΩ –ü–æ–∫–æ—Ä–º–∏—Ç—å")],
            [KeyboardButton(text="üöø –ü–æ–º—ã—Ç—å"), KeyboardButton(text="üéÆ –ü–æ–∏–≥—Ä–∞—Ç—å")],
            [KeyboardButton(text="üò¥ –£–ª–æ–∂–∏—Ç—å —Å–ø–∞—Ç—å"), KeyboardButton(text="üí™ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å")]
        ],
        resize_keyboard=True
    )

@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    pet = get_pet(message.from_user.id)
    if pet:
        await message.answer(f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –¢–≤–æ–π –ø–∏—Ç–æ–º–µ—Ü {pet['name']} –∂–¥–µ—Ç —Ç–µ–±—è!", reply_markup=get_main_keyboard())
    else:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º —Ç–≤–æ–µ–≥–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞. –ö–∞–∫ —Ç—ã —Ö–æ—á–µ—à—å –µ–≥–æ –Ω–∞–∑–≤–∞—Ç—å?")
        await state.set_state(PetStates.waiting_for_name)

@router.message(PetStates.waiting_for_name)
async def create_new_pet(message: Message, state: FSMContext):
    create_pet(message.from_user.id, message.text)
    pet = get_pet(message.from_user.id)
    await message.answer(
        f"–û—Ç–ª–∏—á–Ω–æ! –¢–≤–æ–π –Ω–æ–≤—ã–π –ø–∏—Ç–æ–º–µ—Ü {message.text} —Å–æ–∑–¥–∞–Ω. –í–æ—Ç –µ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:\n"
        f"–•–∞—Ä–∞–∫—Ç–µ—Ä: {pet['personality']}\n"
        f"–õ—é–±–∏–º–∞—è –µ–¥–∞: {pet['favorite_food']}\n"
        f"–õ—é–±–∏–º–æ–µ –∑–∞–Ω—è—Ç–∏–µ: {pet['favorite_activity']}\n"
        f"–£—Ö–∞–∂–∏–≤–∞–π –∑–∞ –Ω–∏–º —Ö–æ—Ä–æ—à–æ!",
        reply_markup=get_main_keyboard()
    )
    await state.clear()

@router.message(F.text == "üîç –°—Ç–∞—Ç—É—Å")
async def cmd_status(message: Message):
    pet = get_pet(message.from_user.id)
    if pet:
        status_emoji = {
            'hunger': 'üçî –ì–æ–ª–æ–¥',
            'cleanliness': 'üöø –ß–∏—Å—Ç–æ—Ç–∞',
            'happiness': 'üòä –°—á–∞—Å—Ç—å–µ',
            'energy': '‚ö° –≠–Ω–µ—Ä–≥–∏—è',
            'intelligence': 'üß† –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç',
            'strength': 'üí™ –°–∏–ª–∞'
        }
        status_text = f"–°—Ç–∞—Ç—É—Å {pet['name']}:\n"
        for stat, emoji in status_emoji.items():
            value = pet[stat]
            bars = '‚ñà' * (value // 10) + '‚ñí' * ((100 - value) // 10)
            status_text += f"{emoji}: {bars} {value}/100\n"
        await message.answer(status_text)
    else:
        await message.answer("–£ —Ç–µ–±—è –µ—â–µ –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–∞. –ò—Å–ø–æ–ª—å–∑—É–π /start —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ.")

@router.message(F.text == "üçΩ –ü–æ–∫–æ—Ä–º–∏—Ç—å")
async def cmd_feed(message: Message):
    pet = get_pet(message.from_user.id)
    if pet:
        last_fed = parse_datetime(pet.get('last_fed'))
        if datetime.now() - last_fed > timedelta(minutes=15):
            foods = ["üçé –Ø–±–ª–æ–∫–æ", "ü•ï –ú–æ—Ä–∫–æ–≤—å", "üçå –ë–∞–Ω–∞–Ω", "ü•ú –û—Ä–µ—Ö–∏", "üçì –Ø–≥–æ–¥—ã"]
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=food, callback_data=f"feed_{food.split()[1]}") for food in foods[:3]],
                [InlineKeyboardButton(text=food, callback_data=f"feed_{food.split()[1]}") for food in foods[3:]]
            ])
            await message.answer("–ß–µ–º —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–∫–æ—Ä–º–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞?", reply_markup=keyboard)
        else:
            await message.answer(f"{pet['name']} –Ω–µ –≥–æ–ª–æ–¥–µ–Ω. –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∫–æ—Ä–º–ª–µ–Ω–∏–µ–º.")
    else:
        await message.answer("–£ —Ç–µ–±—è –µ—â–µ –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–∞. –ò—Å–ø–æ–ª—å–∑—É–π /start —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ.")

@router.callback_query(F.data.startswith("feed_"))
async def process_feed(callback_query: CallbackQuery):
    food = callback_query.data.split("_")[1]
    pet = get_pet(callback_query.from_user.id)
    new_hunger = max(0, pet['hunger'] - 30)
    new_energy = min(100, pet['energy'] + 20)
    happiness_boost = 15 if food == pet['favorite_food'] else 5
    new_happiness = min(100, pet['happiness'] + happiness_boost)
    update_pet(callback_query.from_user.id, hunger=new_hunger, energy=new_energy, happiness=new_happiness, last_fed=datetime.now().isoformat())
    
    response = f"–¢—ã –ø–æ–∫–æ—Ä–º–∏–ª {pet['name']} {food}. "
    if food == pet['favorite_food']:
        response += f"–≠—Ç–æ –µ–≥–æ –ª—é–±–∏–º–∞—è –µ–¥–∞! –û–Ω –æ—á–µ–Ω—å –¥–æ–≤–æ–ª–µ–Ω! "
    response += f"–£—Ä–æ–≤–µ–Ω—å –≥–æ–ª–æ–¥–∞ —Ç–µ–ø–µ—Ä—å {new_hunger}/100, —ç–Ω–µ—Ä–≥–∏–∏ {new_energy}/100, –∞ —Å—á–∞—Å—Ç—å—è {new_happiness}/100."
    
    await callback_query.message.edit_text(response)

@router.message(F.text == "üöø –ü–æ–º—ã—Ç—å")
async def cmd_clean(message: Message):
    pet = get_pet(message.from_user.id)
    if pet:
        last_cleaned = parse_datetime(pet.get('last_cleaned'))
        if datetime.now() - last_cleaned > timedelta(minutes=25):
            new_cleanliness = min(100, pet['cleanliness'] + 40)
            new_happiness = min(100, pet['happiness'] + 10)
            update_pet(message.from_user.id, cleanliness=new_cleanliness, happiness=new_happiness, last_cleaned=datetime.now().isoformat())
            await message.answer(f"–¢—ã –ø–æ–º—ã–ª {pet['name']}. –£—Ä–æ–≤–µ–Ω—å —á–∏—Å—Ç–æ—Ç—ã —Ç–µ–ø–µ—Ä—å {new_cleanliness}/100, –∞ —Å—á–∞—Å—Ç—å—è {new_happiness}/100.")
        else:
            await message.answer(f"{pet['name']} —É–∂–µ —á–∏—Å—Ç—ã–π. –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∫—É–ø–∞–Ω–∏–µ–º.")
    else:
        await message.answer("–£ —Ç–µ–±—è –µ—â–µ –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–∞. –ò—Å–ø–æ–ª—å–∑—É–π /start —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ.")

@router.message(F.text == "üéÆ –ü–æ–∏–≥—Ä–∞—Ç—å")
async def cmd_play(message: Message, state: FSMContext):
    pet = get_pet(message.from_user.id)
    if pet:
        last_played = parse_datetime(pet.get('last_played'))
        if datetime.now() - last_played > timedelta(minutes=10):
            games = ["üß© –ó–∞–≥–∞–¥–∫–∏", "üèÉ‚Äç‚ôÇÔ∏è –ü—Ä—è—Ç–∫–∏", "‚öΩ –ú—è—á", "üß† –ì–æ–ª–æ–≤–æ–ª–æ–º–∫–∏"]
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=game, callback_data=f"play_{game.split()[1]}") for game in games[:2]],
                [InlineKeyboardButton(text=game, callback_data=f"play_{game.split()[1]}") for game in games[2:]]
            ])
            await message.answer("–í–æ —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–∏–≥—Ä–∞—Ç—å —Å –ø–∏—Ç–æ–º—Ü–µ–º?", reply_markup=keyboard)
            await state.set_state(PetStates.waiting_for_game_choice)
        else:
            await message.answer(f"{pet['name']} —É—Å—Ç–∞–ª. –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä–æ–π.")
    else:
        await message.answer("–£ —Ç–µ–±—è –µ—â–µ –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–∞. –ò—Å–ø–æ–ª—å–∑—É–π /start —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ.")

@router.callback_query(PetStates.waiting_for_game_choice)
async def process_game_choice(callback_query: CallbackQuery, state: FSMContext):
    game = callback_query.data.split("_")[1]
    pet = get_pet(callback_query.from_user.id)
    
    if game == "–ó–∞–≥–∞–¥–∫–∏":
        riddles = [
            ("–£ –Ω–µ–≥–æ –æ–≥—Ä–æ–º–Ω—ã–π —Ä–æ—Ç, –û–Ω –∑–æ–≤–µ—Ç—Å—è ‚Ä¶", "–±–µ–≥–µ–º–æ—Ç"),
            ("–ù–µ –ø—Ç–∏—Ü–∞, –∞ —Å –∫—Ä—ã–ª—å—è–º–∏, –ù–µ –ø—á–µ–ª–∞, –∞ –Ω–∞–¥ —Ü–≤–µ—Ç–∫–æ–º", "–±–∞–±–æ—á–∫–∞"),
            ("–•–≤–æ—Å—Ç –ø—É—à–∏—Å—Ç—ã–π, –º–µ—Ö –∑–æ–ª–æ—Ç–∏—Å—Ç—ã–π, –í –ª–µ—Å—É –∂–∏–≤–µ—Ç, –í –¥–µ—Ä–µ–≤–Ω–µ –∫—É—Ä –∫—Ä–∞–¥–µ—Ç", "–ª–∏—Å–∞")
        ]
        riddle, answer = random.choice(riddles)
        await state.update_data(correct_answer=answer)
        await callback_query.message.edit_text(f"–û—Ç–≥–∞–¥–∞–π –∑–∞–≥–∞–¥–∫—É:\n\n{riddle}")
        await state.set_state(PetStates.waiting_for_riddle_answer)
    else:
        happiness_boost = 25 if game == pet['favorite_activity'] else 15
        new_happiness = min(100, pet['happiness'] + happiness_boost)
        new_energy = max(0, pet['energy'] - 30)
        new_intelligence = min(100, pet['intelligence'] + 10)
        update_pet(callback_query.from_user.id, happiness=new_happiness, energy=new_energy, intelligence=new_intelligence, last_played=datetime.now().isoformat())
        
        response = f"–¢—ã –ø–æ–∏–≥—Ä–∞–ª —Å {pet['name']} –≤ {game}. "
        if game == pet['favorite_activity']:
            response += f"–≠—Ç–æ –µ–≥–æ –ª—é–±–∏–º–æ–µ –∑–∞–Ω—è—Ç–∏–µ! –û–Ω –≤ –≤–æ—Å—Ç–æ—Ä–≥–µ! "
        response += f"–£—Ä–æ–≤–µ–Ω—å —Å—á–∞—Å—Ç—å—è —Ç–µ–ø–µ—Ä—å {new_happiness}/100, —ç–Ω–µ—Ä–≥–∏–∏ {new_energy}/100, –∞ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ {new_intelligence}/100."
        
        await callback_query.message.edit_text(response)
        await state.clear()

@router.message(PetStates.waiting_for_riddle_answer)
async def process_riddle_answer(message: Message, state: FSMContext):
    data = await state.get_data()
    correct_answer = data.get("correct_answer")
    pet = get_pet(message.from_user.id)
    
    if message.text.lower() == correct_answer:
        new_happiness = min(100, pet['happiness'] + 30)
        new_intelligence = min(100, pet['intelligence'] + 20)
        update_pet(message.from_user.id, happiness=new_happiness, intelligence=new_intelligence, last_played=datetime.now().isoformat())
        await message.answer(f"–ü—Ä–∞–≤–∏–ª—å–Ω–æ! {pet['name']} –æ—á–µ–Ω—å —Ä–∞–¥, —á—Ç–æ –≤—ã —Ä–∞–∑–≥–∞–¥–∞–ª–∏ –∑–∞–≥–∞–¥–∫—É –≤–º–µ—Å—Ç–µ. –£—Ä–æ–≤–µ–Ω—å —Å—á–∞—Å—Ç—å—è —Ç–µ–ø–µ—Ä—å {new_happiness}/100, –∞ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ {new_intelligence}/100.")
    else:
        new_happiness = min(100, pet['happiness'] + 10)
        new_intelligence = min(100, pet['intelligence'] + 5)
        update_pet(message.from_user.id, happiness=new_happiness, intelligence=new_intelligence, last_played=datetime.now().isoformat())
        await message.answer(f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}. –ù–æ {pet['name']} –≤—Å–µ —Ä–∞–≤–Ω–æ –¥–æ–≤–æ–ª–µ–Ω, —á—Ç–æ –≤—ã –∏–≥—Ä–∞–ª–∏ –≤–º–µ—Å—Ç–µ. –£—Ä–æ–≤–µ–Ω—å —Å—á–∞—Å—Ç—å—è —Ç–µ–ø–µ—Ä—å {new_happiness}/100, –∞ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ {new_intelligence}/100.")
    
    await state.clear()

@router.message(F.text == "üò¥ –£–ª–æ–∂–∏—Ç—å —Å–ø–∞—Ç—å")
async def pet_sleep(message: Message):
    pet = get_pet(message.from_user.id)
    if pet:
        last_slept = parse_datetime(pet.get('last_slept'))
        if datetime.now() - last_slept > timedelta(minutes=25):
            sleep_duration = random.randint(4, 8)
            new_energy = min(100, pet['energy'] + sleep_duration * 10)
            new_hunger = min(100, pet['hunger'] + sleep_duration * 5)
            new_happiness = max(0, pet['happiness'] - sleep_duration * 2)
            new_cleanliness = max(0, pet['cleanliness'] - sleep_duration * 3)
            
            update_pet(message.from_user.id, 
                       energy=new_energy, 
                       hunger=new_hunger, 
                       happiness=new_happiness, 
                       cleanliness=new_cleanliness, 
                       last_slept=datetime.now().isoformat())
            
            await message.answer(f"{pet['name']} –ø–æ—Å–ø–∞–ª {sleep_duration} —á–∞—Å–æ–≤ –∏ —Ö–æ—Ä–æ—à–æ –æ—Ç–¥–æ—Ö–Ω—É–ª!\n"
                                 f"–≠–Ω–µ—Ä–≥–∏—è: {new_energy}/100\n"
                                 f"–ì–æ–ª–æ–¥: {new_hunger}/100\n"
                                 f"–°—á–∞—Å—Ç—å–µ: {new_happiness}/100\n"
                                 f"–ß–∏—Å—Ç–æ—Ç–∞: {new_cleanliness}/100")
        else:
            await message.answer(f"{pet['name']} –µ—â–µ –Ω–µ —É—Å—Ç–∞–ª. –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Å–Ω–æ–º.")
    else:
        await message.answer("–£ —Ç–µ–±—è –µ—â–µ –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–∞. –ò—Å–ø–æ–ª—å–∑—É–π /start —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ.")

@router.message(F.text == "üí™ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å")
async def train_pet(message: Message, state: FSMContext):
    pet = get_pet(message.from_user.id)
    if pet:
        last_trained = parse_datetime(pet.get('last_trained'))
        if datetime.now() - last_trained > timedelta(minutes=15):
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=f"{info['emoji']} {activity}", callback_data=f"train_{activity}") 
                 for activity, info in list(TRAINING_TYPES.items())[:3]],
                [InlineKeyboardButton(text=f"{info['emoji']} {activity}", callback_data=f"train_{activity}") 
                 for activity, info in list(TRAINING_TYPES.items())[3:]]
            ])
            await message.answer("–í—ã–±–µ—Ä–∏ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–ª—è –ø–∏—Ç–æ–º—Ü–∞:", reply_markup=keyboard)
            await state.set_state(PetStates.waiting_for_training_choice)
        else:
            cooldown = timedelta(minutes=15) - (datetime.now() - last_trained)
            await message.answer(f"{pet['name']} –µ—â–µ –Ω–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –ø–æ—Å–ª–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. "
                                 f"–ü–æ–¥–æ–∂–¥–∏ –µ—â–µ {cooldown.seconds // 60} –º–∏–Ω—É—Ç.")
    else:
        await message.answer("–£ —Ç–µ–±—è –µ—â–µ –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–∞. –ò—Å–ø–æ–ª—å–∑—É–π /start —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ.")

@router.callback_query(PetStates.waiting_for_training_choice)
async def process_training_choice(callback_query: CallbackQuery, state: FSMContext):
    training_type = callback_query.data.split("_")[1]
    await state.update_data(training_type=training_type)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=level, callback_data=f"intensity_{level}") 
         for level in INTENSITY_LEVELS.keys()]
    ])
    await callback_query.message.edit_text(f"–í—ã–±—Ä–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: {TRAINING_TYPES[training_type]['emoji']} {training_type}\n"
                                           f"–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:", reply_markup=keyboard)
    await state.set_state(PetStates.waiting_for_training_intensity)

@router.callback_query(PetStates.waiting_for_training_intensity)
async def process_training_intensity(callback_query: CallbackQuery, state: FSMContext):
    intensity = callback_query.data.split("_")[1]
    data = await state.get_data()
    training_type = data['training_type']
    
    pet = get_pet(callback_query.from_user.id)
    
    primary_stat = TRAINING_TYPES[training_type]['primary']
    secondary_stat = TRAINING_TYPES[training_type]['secondary']
    
    multiplier = INTENSITY_LEVELS[intensity]['multiplier']
    energy_cost = INTENSITY_LEVELS[intensity]['energy_cost']
    
    if pet['energy'] < energy_cost:
        await callback_query.message.edit_text(f"{pet['name']} —Å–ª–∏—à–∫–æ–º —É—Å—Ç–∞–ª –¥–ª—è —Ç–∞–∫–æ–π –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. "
                                               f"–ü–æ–ø—Ä–æ–±—É–π –≤—ã–±—Ä–∞—Ç—å –º–µ–Ω–µ–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∏–ª–∏ –¥–∞–π –ø–∏—Ç–æ–º—Ü—É –æ—Ç–¥–æ—Ö–Ω—É—Ç—å.")
        await state.clear()
        return
    
    primary_gain = int(random.randint(5, 15) * multiplier)
    secondary_gain = int(random.randint(2, 8) * multiplier)
    happiness_change = random.randint(-5, 10)
    
    new_primary_stat = min(100, pet[primary_stat] if primary_stat in pet.keys() else 50 + primary_gain)
    new_secondary_stat = min(100, pet[secondary_stat] if secondary_stat in pet.keys() else 50 + secondary_gain)
    new_energy = max(0, pet['energy'] - energy_cost)
    new_happiness = max(0, min(100, pet['happiness'] + happiness_change))
    
    update_pet(callback_query.from_user.id, 
               **{primary_stat: new_primary_stat, 
                  secondary_stat: new_secondary_stat, 
                  'energy': new_energy, 
                  'happiness': new_happiness, 
                  'last_trained': datetime.now().isoformat()})
    
    response = (f"{pet['name']} –∑–∞–≤–µ—Ä—à–∏–ª {intensity.lower()} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É '{training_type}'!\n\n"
                f"{TRAINING_TYPES[training_type]['emoji']} {primary_stat.capitalize()}: {new_primary_stat}/100 (+{primary_gain})\n"
                f"{TRAINING_TYPES[training_type]['emoji']} {secondary_stat.capitalize()}: {new_secondary_stat}/100 (+{secondary_gain})\n"
                f"‚ö° –≠–Ω–µ—Ä–≥–∏—è: {new_energy}/100 (-{energy_cost})\n"
                f"üòä –°—á–∞—Å—Ç—å–µ: {new_happiness}/100 ({'+' if happiness_change > 0 else ''}{happiness_change})")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    achievements = check_achievements(pet, primary_stat, new_primary_stat)
    if achievements:
        response += "\n\nüèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n" + "\n".join(achievements)
    
    await callback_query.message.edit_text(response)
    await state.clear()

def check_achievements(pet, trained_stat, new_stat_value):
    achievements = []
    old_stat_value = pet[trained_stat] if trained_stat in pet.keys() else 0
    if new_stat_value >= 50 and old_stat_value < 50:
        achievements.append(f"ü•â –ë—Ä–æ–Ω–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –≤ {trained_stat}!")
    if new_stat_value >= 75 and old_stat_value < 75:
        achievements.append(f"ü•à –°–µ—Ä–µ–±—Ä—è–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –≤ {trained_stat}!")
    if new_stat_value == 100 and old_stat_value < 100:
        achievements.append(f"ü•á –ó–æ–ª–æ—Ç–æ–π —É—Ä–æ–≤–µ–Ω—å –≤ {trained_stat}!")
    return achievements